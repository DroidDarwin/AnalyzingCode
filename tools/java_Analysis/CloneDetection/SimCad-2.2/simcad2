#!/bin/bash 

help(){
echo "Please type 'simcad2 -help' to see run instruction"
}

usage() {
echo ""
echo "Usage: simcad2 [-version] [-v] [-f] [-help] [-gx] [-i item_to_search] -s source_path -l language"
echo "               [-g granularity] [-t clone_type] [-c clone_grouping] [-x source_transform] [-o output_path]"
echo ""
#echo "-----------------------------------"
echo " -version          : display simcad version"
echo " -v                : verbose mode, shows the detection in progress"
echo " -f                : force detection to discards previous pre-processed resources if exist"
echo " -help             : print this run instruction"
echo " -gx               : display graphical user interface"
echo " language          : name of the source language [ c | java | cs | py ]"
echo " granularity       : source fragment type [ (block | b ) | (function | f) : default = (function | f) ]"
echo " clone_type        : types of clone to seek [ 1 | 2 | 3 | 12 | (23 | nearmiss) | 13 | (123 | all) : default = (123 | all) ]"
echo " clone_grouping    : grouping of clones [ (group | cg) | (pair | cp) : default = (group | cg) ]"
echo " source_transform  : source transformation strategy [ (generous | g) | (greedy | G) : default = (generous | g) ]"
echo " item_to_search    : absolute path to file/folder contains search candidates"
echo " source_path       : absolute path to source folder"
echo " output_path       : absolute path to output folder [ default = {source_path}_simcad_clones ]"
}

simcad_version="SimCad 2.2 (April 2013) : University of Saskatchewan, Canada"

debug_mode="false"

# check we have TXL
txlversion=`txl -V 2>&1 | grep 10.[5-9]`
if [ "${txlversion}" = "" ]
then
echo "*** Error:  simCad requires FreeTXL 10.5 or higher"
echo ""
exit 99
fi

# check we have java
javaversion=`java -version 2>&1 | grep 'java version \"1.'`
if [ "${javaversion}" = "" ]
then
echo "*** Error: simCad requires Java 1.5 or higher"
echo ""
exit 99
fi

lib=.

if [ ! -d ${lib}/tools ]
then
echo "*** Error: Cannot find simCad installation ${lib}"
echo ""
exit 99
fi

# check we compiled the tools
if [ ! -x ${lib}/tools/streamprocess.x ]
then
echo "*** Error: Missing ${lib}/tools/streamprocess.x - type 'make' to make the simCad tools"
echo ""
exit 99
fi

if [ "$#" -eq 0 ]
then
echo "*** Error:  missing required parameters -s (source_path) and -l (language)"
help
exit 99
fi

OUTPUT_DIR=""
VERBOSE=""
FORCE_PREPROCESS=""
GRANULARITY=""
CLONE_TYPE=""
SOURCE_TRANSFORM=""
CLONE_GROUPING=""
GUI_MODE=""

while [ $# -gt 0 ]

do
case $1 in

# display simcad version
-version)
echo "${simcad_version}"
exit 0
;;

-v)
VERBOSE=$1
shift
;;

-f)
FORCE_PREPROCESS=$1
shift
;;

-help)
usage
exit 0
;;

-gx)
GUI_MODE=$1
shift
;;

# check granularity
-g)
shift
if [ "$1" = "block" ] || [ "$1" = "function" ] || [ "$1" = "b" ] || [ "$1" = "f" ]
then
    GRANULARITY=$1
    if [ "${GRANULARITY}" = "b" ] || [ "${GRANULARITY}" = "block" ]
    then
        GRANULARITY="block"
    else
        GRANULARITY="function"
    fi
shift
else
    echo "*** ERROR: Invalid value {$1} for parameter -g (granularity). Valid options [ (block | b) | (function | f) ]"
#help
    exit 99
fi
;;

# check language
-l)
shift
if [ "$1" = "c" ] || [ "$1" = "java" ] || [ "$1" = "cs" ] || [ "$1" = "py" ]
then
    LANGUAGE=$1
    shift
else
    echo "*** ERROR: Invalid value {$1} for parameter -l (language). Valid options [ c | java | cs | py ]"
#help
    exit 99
fi
;;

-t)
shift
if [ "$1" = "1" ] || [ "$1" = "2" ] || [ "$1" = "3" ] || [ "$1" = "12" ] || [ "$1" = "13" ] || [ "$1" = "23" ] || [ "$1" = "123" ] || [ "$1" = "nearmiss" ] || [ "$1" = "all" ]
then
    CLONE_TYPE=$1
    if [ "${CLONE_TYPE}" = "nearmiss" ] 
    then
        CLONE_TYPE="23"
    fi
    
    if [ "${CLONE_TYPE}" = "all" ] 
    then
        CLONE_TYPE="123"
    fi
    shift
else
    echo "*** ERROR: Invalid value {$1} for parameter -t (clone type)."
    echo "Valid options [ 1 | 2 | 3 | 12 | (23 | nearmiss) | 13 | (123 | all) : default : (123 | all) ]"
#help
    exit 99
fi
;;


# get the file containing search item
-i)
    shift
    SEARCH_FILE=$1
    shift
;;

# get the source directory
-s)
    shift
    SOURCE_DIR=$1
    shift
;;

-o)
    shift
    OUTPUT_DIR=$1
    shift
;;

# get clone grouping type / clone_grouping
-c)
shift
if [ "$1" = "group" ] || [ "$1" = "cg" ] || [ "$1" = "pair" ] || [ "$1" = "cp" ]
then
    CLONE_GROUPING=$1
    if [ "${CLONE_GROUPING}" = "cg" ] 
    then
        CLONE_GROUPING="group"
    fi

    if [ "${CLONE_GROUPING}" = "cp" ] 
    then
        CLONE_GROUPING="pair"
    fi
    shift
else
    echo "*** ERROR: Invalid value {$1} for parameter -c (clone_grouping). Valid options [ (group | cg) | (pair | cp) : default = (group | cg) ]"
#help
exit 99
fi
;;

# get source transformation strategy
-x)
shift
if [ "$1" = "generous" ] || [ "$1" = "g" ] || [ "$1" = "greedy" ] || [ "$1" = "G" ]
then
    SOURCE_TRANSFORM=$1
    if [ "${SOURCE_TRANSFORM}" = "g" ] 
    then
        SOURCE_TRANSFORM="generous"
    fi

    if [ "${SOURCE_TRANSFORM}" = "G" ] 
    then
        SOURCE_TRANSFORM="greedy"
    fi
    shift
else
    echo "*** ERROR: Invalid value {$1} for parameter -x (source_transform). Valid options [ (generous | g) | (greedy | G) : default = (generous | g) ]"
#help
exit 99
fi
;;

*)
echo "*** ERROR: Unknown option(s) {$1}"
help
exit 99
shift
;;
esac
done


# check if language selected
if [ "${LANGUAGE}" = "" ]
then
if [ "${GUI_MODE}" != "-gx" ]
then
	echo "*** ERROR: Missing required parameter -l (language). Valid options [ c | java | cs | py ]"
	help
	exit 99
fi
fi


# check if search item is a valid file
#if [ "${SEARCH_FILE}" = "" ]
#then
#echo "*** ERROR: Missing required parameter -i (item_to_search)"
#help
#exit 99
#fi


# check if search item is a valid file
if [ ! -z "${SEARCH_FILE}" ] 
#&& ["${SEARCH_FILE}" != ""]
then
	if [ ! -f "${SEARCH_FILE}" ] && [ ! -d "${SEARCH_FILE}" ]
	then
		echo "*** ERROR: Can't find file/folder for item to search ${SEARCH_FILE}"
		exit 99
	fi
else
	SEARCH_FILE="NONE"	
fi


# check if source directory is a valid one
if [ "${SOURCE_DIR}" = "" ]
then

	if [ "${GUI_MODE}" != "-gx" ]
	then
		echo "*** ERROR: Missing required parameter -s (source_path)"
		help
		exit 99
	fi

fi

# check if source directory is a valid one
if [ "${SOURCE_DIR}" != "" ]
then
	if [ ! -d "${SOURCE_DIR}" ]
	then
	echo "*** ERROR: Can't find system source directory ${SOURCE_DIR}"
	exit 99
	fi
fi

#configure output_dir if not set
if [ "${SOURCE_DIR}" != "" ]
then
	if [ "${OUTPUT_DIR}" = "." ] || [ "${OUTPUT_DIR}" = "./" ] || [ "${OUTPUT_DIR}" = "" ]
	then 
	    OUTPUT_DIR=${SOURCE_DIR}_simcad_clones
	fi
fi

if [ "${OUTPUT_DIR}" != "" ]
then
	if [ ! -d "${OUTPUT_DIR}" ]
	then
	#echo "mkdir"
		/bin/mkdir -p "${OUTPUT_DIR}"
		/bin/chmod +rw "${OUTPUT_DIR}" 
	fi
fi


#setup defaults
if [ "${GUI_MODE}" = "" ]
then
	if [ "${GRANULARITY}" = "" ] 
	then
		GRANULARITY="function"
	fi
	if [ "${CLONE_TYPE}" = "" ] 
	then
		CLONE_TYPE="123"
	fi
	if [ "${SOURCE_TRANSFORM}" = "" ] 
	then
		SOURCE_TRANSFORM="generous"
	fi
	if [ "${CLONE_GROUPING}" = "" ] 
	then
		CLONE_GROUPING="group"
	fi
fi


echo ""
echo "${simcad_version}"

if [ "${debug_mode}" = "true" ]
then
echo "verbose=${VERBOSE}"
echo "force_preprocess=${FORCE_PREPROCESS}"
echo "gui_mode=${GUI_MODE}"
echo "item-to-search=${SEARCH_FILE}"
echo "source-dir=${SOURCE_DIR}"
echo "granularity=${GRANULARITY}"
echo "language=${LANGUAGE}"
echo "clone-type=${CLONE_TYPE}"
echo "output-dir=${OUTPUT_DIR}"
echo "source-transform=${SOURCE_TRANSFORM}"
echo "clone_grouping=${CLONE_GROUPING}"
#exit 0
fi
echo ""

#Detect Clone
#echo ""
#echo "java -Xmx1024m -jar ${lib}/tools/simLib.jar ${VERBOSE} ${SOURCE_DIR} ${LANGUAGE} ${GRANULARITY} ${CLONE_TYPE} ${CLONE_GROUPING} ${SOURCE_TRANSFORM} ${OUTPUT_DIR}"

if [ "${GUI_MODE}" = "-gx" ]
then
#echo "executing gui interface: VERBOSE#:${VERBOSE} FORCE_PREPROCESS#:${FORCE_PREPROCESS} SEARCH_FILE#:${SEARCH_FILE} 'SOURCE_DIR#:${SOURCE_DIR}' LANGUAGE#:${LANGUAGE} GRANULARITY#:${GRANULARITY} CLONE_TYPE#:${CLONE_TYPE} CLONE_GROUPING#:${CLONE_GROUPING} SOURCE_TRANSFORM#:${SOURCE_TRANSFORM} 'OUTPUT_DIR#:${OUTPUT_DIR}'"
	java -Xmx1024m -cp ${lib}/tools/simLib.jar ca.usask.cs.srlab.visualSimcad.VisualSimCad VERBOSE#:${VERBOSE} FORCE_PREPROCESS#:${FORCE_PREPROCESS} "SEARCH_FILE#:${SEARCH_FILE}" "SOURCE_DIR#:${SOURCE_DIR}" LANGUAGE#:${LANGUAGE} GRANULARITY#:${GRANULARITY} CLONE_TYPE#:${CLONE_TYPE} CLONE_GROUPING#:${CLONE_GROUPING} SOURCE_TRANSFORM#:${SOURCE_TRANSFORM} "OUTPUT_DIR#:${OUTPUT_DIR}" 2>&1
else
#echo "executing cli interface: VERBOSE#:${VERBOSE} FORCE_PREPROCESS#:${FORCE_PREPROCESS} SEARCH_FILE#:${SEARCH_FILE} 'SOURCE_DIR#:${SOURCE_DIR}' LANGUAGE#:${LANGUAGE} GRANULARITY#:${GRANULARITY} CLONE_TYPE#:${CLONE_TYPE} CLONE_GROUPING#:${CLONE_GROUPING} SOURCE_TRANSFORM#:${SOURCE_TRANSFORM} 'OUTPUT_DIR#:${OUTPUT_DIR}'"
	java -Xmx1024m -jar ${lib}/tools/simLib.jar ${VERBOSE} ${FORCE_PREPROCESS} "${SEARCH_FILE}" "${SOURCE_DIR}" ${LANGUAGE} ${GRANULARITY} ${CLONE_TYPE} ${CLONE_GROUPING} ${SOURCE_TRANSFORM} "${OUTPUT_DIR}" 2>&1
fi

exit 0

